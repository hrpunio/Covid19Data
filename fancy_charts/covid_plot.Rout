
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R jest oprogramowaniem darmowym i dostarczany jest BEZ JAKIEJKOLWIEK GWARANCJI.
Możesz go rozpowszechniać pod pewnymi warunkami.
Wpisz 'license()' lub 'licence()' aby uzyskać szczegóły dystrybucji.

R jest projektem kolaboracyjnym z wieloma uczestnikami.
Wpisz 'contributors()' aby uzyskać więcej informacji oraz
'citation()' aby dowiedzieć się jak cytować R lub pakiety R w publikacjach.

Wpisz 'demo()' aby zobaczyć demo, 'help()' aby uzyskać pomoc on-line, lub
'help.start()' aby uzyskać pomoc w przeglądarce HTML.
Wpisz 'q()' aby wyjść z R.

[Poprzednio zapisany obszar roboczy został przywrócony]

> ##
> library("dplyr")

Dołączanie pakietu: ‘dplyr’

Następujące obiekty zostały zakryte z ‘package:stats’:

    filter, lag

Następujące obiekty zostały zakryte z ‘package:base’:

    intersect, setdiff, setequal, union

> library("ggplot2")
> library("ggpubr")
Ładowanie wymaganego pakietu: magrittr
> ##
> options(scipen=1000000)
> ## https://www.r-bloggers.com/the-notin-operator/
> `%notin%` <- Negate(`%in%`)
> ##
> today <- Sys.Date()
> tt<- format(today, "%d/%m/%Y")
> million <- 1000000
> ##
> ## Selected European Countries + Israel
> ee <- c(
+ 'BEL', 'GRC', 'LTU', 'PRT', 'BGR', 'ESP', 'LUX', 'ROU', 'CZE', 'FRA', 'HUN',
+ 'SVN', 'DNK', 'HRV', 'MLT', 'SVK', 'DEU', 'ITA', 'NLD', 'FIN', 'EST', 'CYP',
+ 'AUT', 'SWE', 'IRL', 'LVA', 'POL', 'ISL', 'NOR', 'LIE', 'CHE', 'MNE', 'MKD',
+ 'ALB', 'SRB', 'TUR', 'BIH', 'BLR', 'MDA', 'UKR', 'ISR', 'RUS', 'GBR' );
> ee.ee <- c('POL')
> 
> d <- read.csv("indcs.csv", sep = ';',  header=T, na.string="NA");
> ## Liczba krajów
> N1 <- nrow(d)
> ## liczba ludności w milionach
> d$popm <- d$pop / million
> 
> ## Oblicz współczynniki na 1mln 
> d$casesr <- d$cases/d$popm 
> d$deathsr <- d$deaths/d$popm 
> 
> ## Tylko kraje wykazujące zmarłych
> d <- d %>% filter(deaths > 0) %>% as.data.frame
> ## Liczba krajów wykazujących zmarłych
> N1d <- nrow(d)
> 
> ## Tylko kraje z kompletem wskaźników
> d <- d[complete.cases(d), ]
> 
> #########
> nrow(d)
[1] 131
> ######################## Deaths ##############################################
> 
> d9 <- d %>% filter(deathsr > 2 ) %>% droplevels() %>% 
+  mutate (iso3 = reorder(iso3, deathsr)) %>% as.data.frame
> 
> N1d2 <- nrow(d9)
> M1d2 <- median(d9$deathsr, na.rm=T)
> 
> str(d9)
'data.frame':	61 obs. of  11 variables:
 $ iso3   : Factor w/ 61 levels "AUS","URY","MYS",..: 26 11 1 47 59 14 12 35 16 34 ...
  ..- attr(*, "scores")= num [1:61(1d)] 7.68 3.05 2 30.88 195.92 ...
  .. ..- attr(*, "dimnames")=List of 1
  .. .. ..$ : chr  "ALB" "ARM" "AUS" "AUT" ...
 $ country: Factor w/ 61 levels "Albania","Algeria",..: 1 3 4 5 8 11 6 9 10 7 ...
 $ lex2019: num  78.6 75.1 83.4 81.5 81.6 ...
 $ gdp2016: int  11285 9588 44783 45010 39733 17953 39773 10576 13479 10160 ...
 $ cm2017 : num  0.88 1.26 0.35 0.36 0.38 0.75 0.73 0.57 1.48 1.24 ...
 $ pop2018: int  2866376 2951776 24982688 8840521 11433256 7025037 1569439 3323929 209469333 286641 ...
 $ cases  : int  400 881 6052 12969 23403 593 823 816 15927 63 ...
 $ deaths : int  22 9 50 273 2240 24 5 35 800 3 ...
 $ popm   : num  2.87 2.95 24.98 8.84 11.43 ...
 $ casesr : num  140 298 242 1467 2047 ...
 $ deathsr: num  7.68 3.05 2 30.88 195.92 ...
> 
> d9$iso3
 [1] ALB ARM AUS AUT BEL BGR BHR BIH BRA BRB CAN CHE CHL CHN CYP CZE DEU DNK DOM
[20] DZA ECU ESP EST FIN FRA GBR GRC HND HRV HUN IRL IRN ISL ISR ITA KOR LBN LTU
[39] LUX MAR MDA MKD MLT MNE MUS MYS NLD NOR PAN PER POL PRT QAT ROU SRB SVN SWE
[58] TTO TUR URY USA
attr(,"scores")
       ALB        ARM        AUS        AUT        BEL        BGR        BHR 
  7.675197   3.049012   2.001386  30.880533 195.919693   3.416352   3.185852 
       BIH        BRA        BRB        CAN        CHE        CHL        CHN 
 10.529707   3.819175  10.466053  11.738431  82.812311   2.562849   2.397450 
       CYP        CZE        DEU        DNK        DOM        DZA        ECU 
 11.771977   9.313327  25.414391  37.627493  10.162635   4.854550  14.165005 
       ESP        EST        FIN        FRA        GBR        GRC        HND 
311.027268  18.154628   7.252256 162.279329 106.785484   7.734077   2.398951 
       HRV        HUN        IRL        IRN        ISL        ISR        ITA 
  4.647928   6.751529  48.281299  48.814020  17.010612   7.992975 292.427761 
       KOR        LBN        LTU        LUX        MAR        MDA        MKD 
  3.952980   2.774158   5.354192  75.664117   2.581244   9.977646  14.402595 
       MLT        MNE        MUS        MYS        NLD        NOR        PAN 
  2.063430   3.214261   5.532272   2.061621 130.457814  15.060479  15.083054 
       PER        POL        PRT        QAT        ROU        SRB        SVN 
  3.782520   4.186993  36.951242   2.156972  10.736589   9.308848  19.287389 
       SWE        TTO        TUR        URY        USA 
 67.517008   5.755984   9.863979   2.029398  45.355271 
61 Levels: AUS URY MYS MLT QAT CHN HND CHL MAR LBN ARM BHR MNE BGR PER ... ESP
> ###
> factor_cols <- vapply(d9, is.factor, logical(1))
> 
> # Apply the factor() function to those columns, and assign then back into d
> d9[factor_cols] <- lapply(d9[factor_cols], factor)
> str(d9)
'data.frame':	61 obs. of  11 variables:
 $ iso3   : Factor w/ 61 levels "AUS","URY","MYS",..: 26 11 1 47 59 14 12 35 16 34 ...
 $ country: Factor w/ 61 levels "Albania","Algeria",..: 1 3 4 5 8 11 6 9 10 7 ...
 $ lex2019: num  78.6 75.1 83.4 81.5 81.6 ...
 $ gdp2016: int  11285 9588 44783 45010 39733 17953 39773 10576 13479 10160 ...
 $ cm2017 : num  0.88 1.26 0.35 0.36 0.38 0.75 0.73 0.57 1.48 1.24 ...
 $ pop2018: int  2866376 2951776 24982688 8840521 11433256 7025037 1569439 3323929 209469333 286641 ...
 $ cases  : int  400 881 6052 12969 23403 593 823 816 15927 63 ...
 $ deaths : int  22 9 50 273 2240 24 5 35 800 3 ...
 $ popm   : num  2.87 2.95 24.98 8.84 11.43 ...
 $ casesr : num  140 298 242 1467 2047 ...
 $ deathsr: num  7.68 3.05 2 30.88 195.92 ...
> ###
> 
> ## https://stackoverflow.com/questions/11093248/geom-vline-with-character-xintercept
> rys99 <- ggplot(d9, aes(x =iso3, y = deathsr )) +
+   geom_point(size=1, colour = 'steelblue', alpha=.5) +
+   xlab(label="Country") +
+   ylab(label="Deaths/1mln") +
+   ggtitle(sprintf("COVID19 mortality in deaths/mln (as of %s)", tt), 
+    subtitle=sprintf("Countries with ratio > 0: %i | Countries with ratio > 2.0: N=%i (median %.1f)", 
+        N1d, N1d2, M1d2)) +
+   theme(axis.text = element_text(size = 4)) +
+   ##theme(plot.title = element_text(hjust = 0.5)) +
+   scale_y_continuous(breaks=c(0,20,40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360)) +
+   geom_hline(yintercept=M1d2, linetype="solid", color = "steelblue") +
+   ## nihu-hu nie działa
+   geom_vline(aes(xintercept = which(levels(iso3) == 'POL')), size=1, color="#8A0303", alpha=.25) +
+   geom_vline(aes(xintercept = which(levels(iso3) == 'DEU')), size=1, color="#8A0303", alpha=.25) +
+   geom_vline(aes(xintercept = which(levels(iso3) == 'SWE')), size=1, color="#8A0303", alpha=.25) +
+   coord_flip()
> 
> ggsave(plot=rys99, file="covidd_dp99.png")
Saving 7 x 7 in image
> 
> ################
> sources <- sprintf ("As of %s\n(Sources: https://www.ecdc.europa.eu/en/covid-19-pandemic https://ourworldindata.org/)", tt)
> 
> ## Etykiety tylko dla wybranych krajów
> 
> ## Add empty factor level 
> # https://rpubs.com/Mentors_Ubiqum/Add_Levels
> d$iso3 <- factor(d$iso3, levels = c(levels(d$iso3), ""))
> 
> d$iso3xgdp <- d$iso3
> d$iso3xlex <- d$iso3
> d$iso3xcm <- d$iso3
> 
> ## Kraje o niskich  wartościach bez etykiet
> d$iso3xgdp[ (d$gdp2016 < 45000) & (d$deathsr < 50 ) ] <- ""
> d$iso3xlex[ ( (d$lex2019 < 80) | (d$deathsr < 50 ) ) ] <- ""
> d$iso3xcm[ ((d$cm2017 > 1.2) | (d$deathsr < 50 ) ) ] <- ""
> 
> nrow(d)
[1] 131
> 
> rys1 <- ggplot(d, aes(x=gdp2016, y=deathsr)) + 
+   geom_point() +
+   geom_text(data=d, aes(label=sprintf("%s", iso3xgdp), x=gdp2016, y= deathsr), vjust=-0.9, size=2 ) +
+   xlab("GDP (USD, Constant prices)") + 
+   ylab("deaths/1mln") + 
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("GDP2016CP vs COVID19 mortality", subtitle=sources)
> 
> rys2 <- ggplot(d, aes(x=lex2019, y=deathsr)) + 
+   geom_point() +
+   geom_text(data=d, aes(label=sprintf("%s", iso3xlex), x=lex2019, y= deathsr), vjust=-0.9, size=2 ) +
+   xlab("Life expentancy") + 
+   ylab("deaths/1mln") + 
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("Life expentancy vs COVID19 mortality", subtitle=sources)
> 
> rys3 <- ggplot(d, aes(x=cm2017, y=deathsr)) + 
+   geom_point() +
+   geom_text(data=d, aes(label=sprintf("%s", iso3xcm), x=cm2017, y= deathsr), vjust=-0.9, size=2 ) +
+   xlab("Child mortality %") +
+   ylab("deaths/1mln") + 
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("Child mortality vs COVID19 mortality", subtitle=sources)
> 
> rys0 <- ggplot(d, aes(x=gdp2016, y=cm2017)) + 
+   geom_point() +
+   xlab("GDP (USD, Constant prices)") + 
+   ylab("Child mortality") +
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("GDP2016CP vs Child mortality", subtitle=sources)
> 
> ggsave(plot=rys1, file="covidd_gdp_w.png", width=10)
Saving 10 x 7 in image
> ggsave(plot=rys2, file="covidd_le_w.png", width=10)
Saving 10 x 7 in image
> ggsave(plot=rys3, file="covidd_cm_w.png", width=10)
Saving 10 x 7 in image
> ggsave(plot=rys0, file="covidd_gdp_cm_w.png", width=10)
Saving 10 x 7 in image
> 
> de <- d %>% filter (iso3 %in% ee) %>% as.data.frame
> str(de)
'data.frame':	42 obs. of  14 variables:
 $ iso3    : Factor w/ 204 levels "ABW","AFG","AGO",..: 5 12 15 20 23 24 35 48 49 50 ...
 $ country : Factor w/ 203 levels "Afghanistan",..: 2 12 19 31 26 18 181 50 51 74 ...
 $ lex2019 : num  78.6 81.5 81.6 75 77.4 ...
 $ gdp2016 : int  11285 45010 39733 17953 10576 18766 61844 26540 31089 46841 ...
 $ cm2017  : num  0.88 0.36 0.38 0.75 0.57 0.37 0.42 0.27 0.33 0.37 ...
 $ pop2018 : int  2866376 8840521 11433256 7025037 3323929 9483499 8513227 1189265 10629928 82905782 ...
 $ cases   : int  400 12969 23403 593 816 1066 22710 526 5312 108202 ...
 $ deaths  : int  22 273 2240 24 35 13 705 14 99 2107 ...
 $ popm    : num  2.87 8.84 11.43 7.03 3.32 ...
 $ casesr  : num  139.5 1467 2046.9 84.4 245.5 ...
 $ deathsr : num  7.68 30.88 195.92 3.42 10.53 ...
 $ iso3xgdp: Factor w/ 204 levels "ABW","AFG","AGO",..: 204 12 15 204 204 204 35 204 204 50 ...
 $ iso3xlex: Factor w/ 204 levels "ABW","AFG","AGO",..: 204 204 15 204 204 204 35 204 204 204 ...
 $ iso3xcm : Factor w/ 204 levels "ABW","AFG","AGO",..: 204 204 15 204 204 204 35 204 204 204 ...
> 
> ## Wykresy 1--3 dla krajów europy ############
> ## Wyróżniamy Polskę
> de$iso3xgdp <- de$gdp2016
> de$iso3xlex <- de$lex2019
> de$iso3xcm <- de$cm2017
> ## Bez etykiet wszystko za wyjątkiem PL
> de$iso3xgdp[ de$iso3 %notin% ee.ee ] <- NA
> de$iso3xlex[ de$iso3 %notin% ee.ee ] <- NA
> de$iso3xcm[ de$iso3 %notin% ee.ee ] <- NA
> 
> sources <- sprintf ("As of %s | Red dot = PL\n(Sources: https://www.ecdc.europa.eu/en/covid-19-pandemic https://ourworldindata.org/)", tt)
> 
> rys1e <- ggplot(de, aes(x=gdp2016, y=deathsr)) + 
+   geom_point() +
+   geom_text(data=de, aes(label=sprintf("%s", iso3), x=gdp2016, y= deathsr), vjust=-0.9, size=2 ) +
+   geom_point(data=de, aes(x=iso3xgdp, y= deathsr), size=2, color="red" ) +
+   xlab("GDP (USD, Constant prices)") + 
+   ylab("deaths/1mln") +
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("GDP2016CP vs COVID19 mortality (Europe)", subtitle=sources)
> 
> rys2e <- ggplot(de, aes(x=lex2019, y=deathsr)) + 
+   geom_point() +
+   geom_text(data=de, aes(label=sprintf("%s", iso3), x=lex2019, y= deathsr), vjust=-0.9, size=2 ) +
+   geom_point(data=de, aes(x=iso3xlex, y= deathsr), size=2, color="red" ) +	       
+   xlab("Life expentancy") + 
+   ylab("deaths/1mln") +
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("Life expentancy vs COVID19 mortality (Europe)", subtitle=sources)
> 
> rys3e <- ggplot(de, aes(x=cm2017, y=deathsr)) + 
+   geom_point() +
+   geom_text(data=de, aes(label=sprintf("%s", iso3), x=cm2017, y= deathsr), vjust=-0.9, size=2 ) +
+   geom_point(data=de, aes(x=iso3xcm, y= deathsr), size=2, color="red" ) +
+   xlab("Child mortality %") + 
+   ylab("deaths/1mln") +
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("Child mortality vs COVID19 mortality (Europe)", subtitle=sources)
> 
> rys0e <- ggplot(de, aes(x=gdp2016, y=cm2017)) + 
+   geom_point() +
+   geom_text(data=de, aes(label=sprintf("%s", iso3), x=gdp2016, y= cm2017), vjust=-0.9, size=2 ) +
+   xlab("GDP (USD, Constant prices") + 
+   ylab("Child mortality %") +
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("GDP2016CP vs Child mortality (Europe)", subtitle=sources)
> 
> ggsave(plot=rys1e, file="covidd_gdp_e.png", width=10)
Saving 10 x 7 in image
Komunikat ostrzegawczy:
Removed 41 rows containing missing values (geom_point). 
> ggsave(plot=rys2e, file="covidd_le_e.png", width=10)
Saving 10 x 7 in image
Komunikat ostrzegawczy:
Removed 41 rows containing missing values (geom_point). 
> ggsave(plot=rys3e, file="covidd_cm_e.png", width=10)
Saving 10 x 7 in image
Komunikat ostrzegawczy:
Removed 41 rows containing missing values (geom_point). 
> ggsave(plot=rys0e, file="covidd_gdp_cm_e.png", width=10)
Saving 10 x 7 in image
> 
> ############################ Cases #######################################################
> sources <- sprintf ("As of %s\n(Sources: https://www.ecdc.europa.eu/en/covid-19-pandemic https://ourworldindata.org/)", tt)
> 
> d$iso3xgdp <- d$iso3
> d$iso3xlex <- d$iso3
> d$iso3xcm <- d$iso3
> 
> ## Niskie wartości bez etykiet
> d$iso3xgdp[ (d$gdp2016 < 45000) & (d$casesr < 50 ) ] <- ""
> d$iso3xlex[ ( (d$lex2019 < 80) | (d$casesr < 50 ) ) ] <- ""
> d$iso3xcm[ ((d$cm2017 > 1.2) | (d$casesr < 50 ) ) ] <- ""
> 
> rys1c <- ggplot(d, aes(x=gdp2016, y=casesr)) + 
+   geom_point() +
+   geom_text(data=d, aes(label=sprintf("%s", iso3xgdp), x=gdp2016, y= casesr), vjust=-0.9, size=2 ) +
+   xlab("GDP (USD, Constant prices)") + 
+   ylab("cases/1mln") + 
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("GDP2016CP vs COVID19 cases", subtitle=sources)
> 
> rys2c <- ggplot(d, aes(x=lex2019, y=casesr)) + 
+   geom_point() +
+   geom_text(data=d, aes(label=sprintf("%s", iso3xlex), x=lex2019, y= casesr), vjust=-0.9, size=2 ) +
+   xlab("Life expentancy") + 
+   ylab("cases/1mln") + 
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("Life expentancy vs COVID19 cases", subtitle=sources)
> 
> rys3c <- ggplot(d, aes(x=cm2017, y=casesr)) + 
+   geom_point() +
+   geom_text(data=d, aes(label=sprintf("%s", iso3xcm), x=cm2017, y= casesr), vjust=-0.9, size=2 ) +
+   xlab("Child mortality %") +
+   ylab("cases/1mln") + 
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("Child mortality vs COVID19 mortality", subtitle=sources)
> 
> ### ### ##
> sources <- sprintf ("As of %s | Red dot = PL\n(Sources: https://www.ecdc.europa.eu/en/covid-19-pandemic https://ourworldindata.org/)", tt)
> ggsave(plot=rys1c, file="covidc_gdp_w.png", width=10)
Saving 10 x 7 in image
> ggsave(plot=rys2c, file="covidc_le_w.png", width=10)
Saving 10 x 7 in image
> ggsave(plot=rys3c, file="covidc_cm_w.png", width=10)
Saving 10 x 7 in image
> 
> de <- d %>% filter (iso3 %in% ee) %>% as.data.frame
> 
> de$iso3xgdp <- de$gdp2016
> de$iso3xlex <- de$lex2019
> de$iso3xcm <- de$cm2017
> de$iso3xgdp[ de$iso3 %notin% ee.ee ] <- NA
> de$iso3xlex[ de$iso3 %notin% ee.ee ] <- NA
> de$iso3xcm[ de$iso3 %notin% ee.ee ] <- NA
> 
> rys1ec <- ggplot(de, aes(x=gdp2016, y=casesr)) + 
+   geom_point() +
+   geom_text(data=de, aes(label=sprintf("%s", iso3), x=gdp2016, y= casesr), vjust=-0.9, size=2 ) +
+   geom_point(data=de, aes(x=iso3xgdp, y= casesr), size=2, color="red" ) +
+   xlab("GDP (USD, Constant prices") + 
+   ylab("cases/1mln") +
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("GDP2016CP vs COVID19 cases (Europe)", subtitle=sources)
> 
> rys2ec <- ggplot(de, aes(x=lex2019, y=casesr)) + 
+   geom_point() +
+   geom_text(data=de, aes(label=sprintf("%s", iso3), x=lex2019, y= casesr), vjust=-0.9, size=2 ) +
+   geom_point(data=de, aes(x=iso3xlex, y= casesr), size=2, color="red" ) +	       
+   xlab("Life expentancy") + 
+   ylab("cases/1mln") +
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("Life expentancy vs COVID19 cases (Europe)", subtitle=sources)
> 
> rys3ec <- ggplot(de, aes(x=cm2017, y=casesr)) + 
+   geom_point() +
+   geom_text(data=de, aes(label=sprintf("%s", iso3), x=cm2017, y= casesr), vjust=-0.9, size=2 ) +
+   geom_point(data=de, aes(x=iso3xcm, y= casesr), size=2, color="red" ) +
+   xlab("Child mortality") + 
+   ylab("cases/1mln") +
+   geom_smooth(method="loess", se=F, size=2) +
+   ggtitle("Child mortality vs COVID19 cases (Europe)", subtitle=sources)
> 
> ggsave(plot=rys1ec, file="covidc_gdp_e.png", width=10)
Saving 10 x 7 in image
Komunikat ostrzegawczy:
Removed 41 rows containing missing values (geom_point). 
> ggsave(plot=rys2ec, file="covidc_le_e.png", width=10)
Saving 10 x 7 in image
Komunikat ostrzegawczy:
Removed 41 rows containing missing values (geom_point). 
> ggsave(plot=rys3ec, file="covidc_cm_e.png", width=10)
Saving 10 x 7 in image
Komunikat ostrzegawczy:
Removed 41 rows containing missing values (geom_point). 
> 
> 
> proc.time()
użytkownik     system   upłynęło 
    11.222      0.161     11.386 
